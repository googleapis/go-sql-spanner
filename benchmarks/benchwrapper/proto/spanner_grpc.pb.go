// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: spanner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpannerBenchWrapper_Read_FullMethodName   = "/spanner_bench.SpannerBenchWrapper/Read"
	SpannerBenchWrapper_Insert_FullMethodName = "/spanner_bench.SpannerBenchWrapper/Insert"
	SpannerBenchWrapper_Update_FullMethodName = "/spanner_bench.SpannerBenchWrapper/Update"
)

// SpannerBenchWrapperClient is the client API for SpannerBenchWrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpannerBenchWrapperClient interface {
	// Read represents operations like Go's ReadOnlyTransaction.Query, Java's
	// ReadOnlyTransaction.executeQuery, Python's snapshot.read, and Node's
	// Transaction.Read.
	//
	// It will typically be used to read many items.
	Read(ctx context.Context, in *ReadQuery, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Insert represents operations like Go's Client.Apply, Java's
	// DatabaseClient.writeAtLeastOnce, Python's transaction.commit, and Node's
	// Transaction.Commit.
	//
	// It will typically be used to insert many items.
	Insert(ctx context.Context, in *InsertQuery, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Update represents operations like Go's ReadWriteTransaction.BatchUpdate,
	// Java's TransactionRunner.run, Python's Batch.update, and Node's
	// Transaction.BatchUpdate.
	//
	// It will typically be used to update many items.
	Update(ctx context.Context, in *UpdateQuery, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type spannerBenchWrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewSpannerBenchWrapperClient(cc grpc.ClientConnInterface) SpannerBenchWrapperClient {
	return &spannerBenchWrapperClient{cc}
}

func (c *spannerBenchWrapperClient) Read(ctx context.Context, in *ReadQuery, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, SpannerBenchWrapper_Read_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spannerBenchWrapperClient) Insert(ctx context.Context, in *InsertQuery, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, SpannerBenchWrapper_Insert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spannerBenchWrapperClient) Update(ctx context.Context, in *UpdateQuery, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, SpannerBenchWrapper_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpannerBenchWrapperServer is the server API for SpannerBenchWrapper service.
// All implementations must embed UnimplementedSpannerBenchWrapperServer
// for forward compatibility.
type SpannerBenchWrapperServer interface {
	// Read represents operations like Go's ReadOnlyTransaction.Query, Java's
	// ReadOnlyTransaction.executeQuery, Python's snapshot.read, and Node's
	// Transaction.Read.
	//
	// It will typically be used to read many items.
	Read(context.Context, *ReadQuery) (*EmptyResponse, error)
	// Insert represents operations like Go's Client.Apply, Java's
	// DatabaseClient.writeAtLeastOnce, Python's transaction.commit, and Node's
	// Transaction.Commit.
	//
	// It will typically be used to insert many items.
	Insert(context.Context, *InsertQuery) (*EmptyResponse, error)
	// Update represents operations like Go's ReadWriteTransaction.BatchUpdate,
	// Java's TransactionRunner.run, Python's Batch.update, and Node's
	// Transaction.BatchUpdate.
	//
	// It will typically be used to update many items.
	Update(context.Context, *UpdateQuery) (*EmptyResponse, error)
	mustEmbedUnimplementedSpannerBenchWrapperServer()
}

// UnimplementedSpannerBenchWrapperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpannerBenchWrapperServer struct{}

func (UnimplementedSpannerBenchWrapperServer) Read(context.Context, *ReadQuery) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedSpannerBenchWrapperServer) Insert(context.Context, *InsertQuery) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedSpannerBenchWrapperServer) Update(context.Context, *UpdateQuery) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSpannerBenchWrapperServer) mustEmbedUnimplementedSpannerBenchWrapperServer() {}
func (UnimplementedSpannerBenchWrapperServer) testEmbeddedByValue()                             {}

// UnsafeSpannerBenchWrapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpannerBenchWrapperServer will
// result in compilation errors.
type UnsafeSpannerBenchWrapperServer interface {
	mustEmbedUnimplementedSpannerBenchWrapperServer()
}

func RegisterSpannerBenchWrapperServer(s grpc.ServiceRegistrar, srv SpannerBenchWrapperServer) {
	// If the following call pancis, it indicates UnimplementedSpannerBenchWrapperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpannerBenchWrapper_ServiceDesc, srv)
}

func _SpannerBenchWrapper_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpannerBenchWrapperServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpannerBenchWrapper_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpannerBenchWrapperServer).Read(ctx, req.(*ReadQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpannerBenchWrapper_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpannerBenchWrapperServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpannerBenchWrapper_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpannerBenchWrapperServer).Insert(ctx, req.(*InsertQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpannerBenchWrapper_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpannerBenchWrapperServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpannerBenchWrapper_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpannerBenchWrapperServer).Update(ctx, req.(*UpdateQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// SpannerBenchWrapper_ServiceDesc is the grpc.ServiceDesc for SpannerBenchWrapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpannerBenchWrapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spanner_bench.SpannerBenchWrapper",
	HandlerType: (*SpannerBenchWrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _SpannerBenchWrapper_Read_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _SpannerBenchWrapper_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SpannerBenchWrapper_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spanner.proto",
}
